---
// HeroSlider.astro
// Props definition for the component
interface SlideContent {
  id: string;
  title: string;
  subtitle: string;
  subtitleColor: "hotpink" | "teal" | "customblue" | string;
  description: string;
  buttonText: string;
  buttonColor: "hotpink" | "teal" | "customblue" | "customgray" | string;
  buttonIcon: string;
  image: string;
}

interface Props {
  slides?: SlideContent[];
  showStats?: boolean;
}

// Default slide content if none is provided
const defaultSlides: SlideContent[] = [
  {
    id: "palestine",
    title: "Palestine",
    subtitle: "Deliver Change",
    subtitleColor: "hotpink",
    description: "Your donation can make a real difference in the lives of those affected by the ongoing crisis. Help us provide essential aid, medical support, and hope.",
    buttonText: "Donate Today",
    buttonColor: "hotpink",
    buttonIcon: "fa-heart",
    image: "/assets/images/home.jpg"
  },
  {
    id: "emergency",
    title: "Emergency",
    subtitle: "Response Appeal",
    subtitleColor: "teal",
    description: "When disaster strikes, immediate action is crucial. Your support enables us to respond quickly with life-saving aid and resources to those in desperate need.",
    buttonText: "Support Now",
    buttonColor: "teal",
    buttonIcon: "fa-hand-holding-heart",
    image: "/assets/images/home.jpg"
  },
  {
    id: "education",
    title: "Education",
    subtitle: "For Every Child",
    subtitleColor: "customblue",
    description: "Education provides hope for a better future. Help us build schools, train teachers, and provide educational materials to children affected by conflict and poverty.",
    buttonText: "Support Education",
    buttonColor: "customblue",
    buttonIcon: "fa-graduation-cap",
    image: "/assets/images/home.jpg"
  }
];

// Get component props with defaults
const { 
  slides = defaultSlides,
  showStats = true 
} = Astro.props;
---

<!-- Hero Section with Swiper Slider -->
<section class="relative overflow-hidden min-h-[500px]">
  <!-- Swiper container -->
  <div class="swiper hero-swiper h-[500px]">
    <div class="swiper-wrapper">
      {slides.map((slide, index) => (
        <div class="swiper-slide relative" id={slide.id} data-index={index}>
          <div 
            class="absolute inset-0 bg-cover bg-center bg-no-repeat"
            style={`
              background-image: linear-gradient(
                rgba(0, 0, 0, 0.65),
                rgba(0, 0, 0, 0.65)
              ),
              url('${slide.image}');
            `}
          ></div>
          
          <!-- Animated particles overlay -->
          <div class="absolute inset-0 opacity-20">
            <div class="particles-js"></div>
          </div>
          
          <div class="container mx-auto px-4 relative z-10 h-full flex items-center">
            <div class="max-w-2xl">
              <h1 class="playfair text-4xl md:text-6xl font-bold mb-2 text-white animate-fade-in-up">
                <span class="bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300">
                  {slide.title}
                </span>
              </h1>
              <h2 class="playfair text-3xl md:text-5xl italic mb-8 text-white animate-fade-in-up animation-delay-300">
                <span class={`border-b-2 border-${slide.subtitleColor} pb-1`}>
                  {slide.subtitle}
                </span>
              </h2>
              <p class="text-gray-200 mb-8 text-lg animate-fade-in-up animation-delay-600 max-w-xl">
                {slide.description}
              </p>
              <div class="flex flex-wrap gap-4 animate-fade-in-up animation-delay-900">
                <button class={`group bg-${slide.buttonColor} hover:bg-opacity-90 text-white px-8 py-4 rounded-lg shadow-lg transition-all duration-300 transform hover:-translate-y-1 hover:scale-105 font-bold flex items-center gap-2`}>
                  <i class={`fas ${slide.buttonIcon}`}></i>
                  {slide.buttonText}
                  <i class="fas fa-arrow-right transition-transform duration-300 group-hover:translate-x-1"></i>
                </button>
                <button class="bg-transparent hover:bg-white/10 text-white border-2 border-white px-8 py-3.5 rounded-lg transition-all duration-300 font-medium flex items-center gap-2">
                  <i class="fas fa-info-circle"></i>
                  Learn More
                </button>
              </div>
              
              {showStats && slide.id === "palestine" && (
                <!-- Emergency appeal stats -->
                <div class="mt-12 grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                  <div class="bg-customgray/20 backdrop-blur-sm p-4 rounded-lg border border-teal/20 transform hover:scale-105 transition-transform duration-300">
                    <div class="text-3xl font-bold text-white mb-1">6.9M+</div>
                    <div class="text-gray-300 text-sm">Meals Provided</div>
                  </div>
                  <div class="bg-customgray/20 backdrop-blur-sm p-4 rounded-lg border border-customblue/20 transform hover:scale-105 transition-transform duration-300">
                    <div class="text-3xl font-bold text-white mb-1">3.2M+</div>
                    <div class="text-gray-300 text-sm">People Reached</div>
                  </div>
                  <div class="bg-customgray/20 backdrop-blur-sm p-4 rounded-lg border border-hotpink/20 transform hover:scale-105 transition-transform duration-300">
                    <div class="text-3xl font-bold text-white mb-1">85%</div>
                    <div class="text-gray-300 text-sm">Funds to Direct Aid</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Swiper pagination (customized with brand colors) -->
    <div class="swiper-pagination"></div>
    
    <!-- Swiper navigation buttons (colored based on slide) -->
    <!-- <div class="swiper-button-prev navigate-prev text-white opacity-80 hover:opacity-100 transition-opacity"></div>
    <div class="swiper-button-next navigate-next text-white opacity-80 hover:opacity-100 transition-opacity"></div> -->
  </div>
  
  <!-- Scroll indicator -->
  <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 text-white animate-bounce">
    <i class="fas fa-chevron-down"></i>
  </div>
</section>

<style>
/* Hero Section Custom Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fadeInUp 0.8s ease forwards;
  opacity: 0;
}

.animation-delay-300 {
  animation-delay: 300ms;
}

.animation-delay-600 {
  animation-delay: 600ms;
}

.animation-delay-900 {
  animation-delay: 900ms;
}

/* Scroll indicator animation */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0) translateX(-50%);
  }
  40% {
    transform: translateY(-10px) translateX(-50%);
  }
  60% {
    transform: translateY(-5px) translateX(-50%);
  }
}

.animate-bounce {
  animation: bounce 2s infinite;
}

/* Custom navigation & pagination styling */
:global(.swiper-button-next), 
:global(.swiper-button-prev) {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

:global(.swiper-button-next:after),
:global(.swiper-button-prev:after) {
  font-size: 18px;
  font-weight: bold;
}

/* Custom brand colors for navigation buttons */
:global(.swiper-slide[data-index="0"] ~ .swiper-button-next),
:global(.swiper-slide[data-index="0"] ~ .swiper-button-prev) {
  background-color: rgba(238, 12, 110, 0.7); /* hotpink */
}

:global(.swiper-slide[data-index="0"] ~ .swiper-button-next:hover),
:global(.swiper-slide[data-index="0"] ~ .swiper-button-prev:hover) {
  background-color: rgba(238, 12, 110, 0.9);
}

:global(.swiper-slide[data-index="1"] ~ .swiper-button-next),
:global(.swiper-slide[data-index="1"] ~ .swiper-button-prev) {
  background-color: rgba(1, 166, 160, 0.7); /* teal */
}

:global(.swiper-slide[data-index="1"] ~ .swiper-button-next:hover),
:global(.swiper-slide[data-index="1"] ~ .swiper-button-prev:hover) {
  background-color: rgba(1, 166, 160, 0.9);
}

:global(.swiper-slide[data-index="2"] ~ .swiper-button-next),
:global(.swiper-slide[data-index="2"] ~ .swiper-button-prev) {
  background-color: rgba(11, 169, 224, 0.7); /* blue */
}

:global(.swiper-slide[data-index="2"] ~ .swiper-button-next:hover),
:global(.swiper-slide[data-index="2"] ~ .swiper-button-prev:hover) {
  background-color: rgba(11, 169, 224, 0.9);
}

/* Custom pagination to match slide colors */
:global(.swiper-pagination-bullet) {
  width: 12px;
  height: 12px;
  background: rgba(255, 255, 255, 0.7);
  opacity: 0.5;
  transition: all 0.3s ease;
}

:global(.swiper-pagination-bullet-active) {
  opacity: 1;
  transform: scale(1.2);
}

@media (max-width: 768px) {
  :global(.swiper-button-next),
  :global(.swiper-button-prev) {
    display: none;
  }
}
</style>

<!-- Load Swiper JS from CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script is:inline src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<!-- Optional: Load Particles JS from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<script is:inline>
  // Initialize everything after DOM is fully loaded
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize particles.js if available
    if (typeof particlesJS !== 'undefined') {
      document.querySelectorAll('.particles-js').forEach(function(container, index) {
        if (!container.id) container.id = `particles-js-${index}`;
        particlesJS(container.id, {
          "particles": {
            "number": {
              "value": 80,
              "density": {
                "enable": true,
                "value_area": 800
              }
            },
            "color": {
              "value": "#ffffff"
            },
            "shape": {
              "type": "circle",
              "stroke": {
                "width": 0,
                "color": "#000000"
              },
            },
            "opacity": {
              "value": 0.5,
              "random": true
            },
            "size": {
              "value": 3,
              "random": true
            },
            "line_linked": {
              "enable": true,
              "distance": 150,
              "color": "#ffffff",
              "opacity": 0.4,
              "width": 1
            },
            "move": {
              "enable": true,
              "speed": 2,
              "direction": "none",
              "random": false,
              "straight": false,
              "out_mode": "out",
              "bounce": false,
            }
          },
          "interactivity": {
            "detect_on": "canvas",
            "events": {
              "onhover": {
                "enable": true,
                "mode": "grab"
              },
              "resize": true
            },
            "modes": {
              "grab": {
                "distance": 140,
                "line_linked": {
                  "opacity": 1
                }
              }
            }
          },
          "retina_detect": true
        });
      });
    }

    // Brand colors
    const brandColors = {
      hotpink: "rgba(238, 12, 110, 0.7)",
      hotpinkHover: "rgba(238, 12, 110, 0.9)",
      teal: "rgba(1, 166, 160, 0.7)",
      tealHover: "rgba(1, 166, 160, 0.9)",
      blue: "rgba(11, 169, 224, 0.7)",
      blueHover: "rgba(11, 169, 224, 0.9)",
      gray: "rgba(91, 90, 89, 0.7)",
      grayHover: "rgba(91, 90, 89, 0.9)"
    };

    // Initialize Swiper
    const heroSwiper = new Swiper('.hero-swiper', {
      // Optional parameters
      loop: true,
      effect: 'fade', // Use fade effect for smooth transitions
      fadeEffect: {
        crossFade: true
      },
      speed: 1000, // Transition speed in ms
      autoplay: {
        delay: 5000, // 5 seconds between slides
        disableOnInteraction: false, // Continue autoplay after user interaction
      },
      
      // If you need pagination (the dots)
      pagination: {
        el: '.swiper-pagination',
        clickable: true, // Allow clicking on pagination dots
        renderBullet: function (index, className) {
          let color;
          if (index === 0) color = brandColors.hotpink;
          else if (index === 1) color = brandColors.teal;
          else if (index === 2) color = brandColors.blue;
          else color = '#ffffff';
          
          return `<span class="${className}" style="background-color: ${color}"></span>`;
        }
      },
      
      // Navigation arrows
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      
      // Enable keyboard control
      keyboard: {
        enabled: true,
      },
      
      // Add animation triggers on slide change
      on: {
        init: function() {
          // Initialize animations for first slide
          const activeSlide = this.slides[this.activeIndex];
          activeSlide.querySelectorAll('.animate-fade-in-up').forEach((el, index) => {
            setTimeout(() => {
              el.style.opacity = '1';
              el.style.transform = 'translateY(0)';
              el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
            }, index * 300);
          });
          
          // Set initial navigation colors based on active slide
          updateNavigationColors(this.activeIndex);
        },
        slideChangeTransitionStart: function() {
          // Hide elements when slide starts changing
          this.slides.forEach((slide) => {
            slide.querySelectorAll('.animate-fade-in-up').forEach((el) => {
              el.style.opacity = '0';
              el.style.transform = 'translateY(20px)';
            });
          });
          
          // Update navigation colors based on active slide
          updateNavigationColors(this.realIndex);
        },
        slideChangeTransitionEnd: function() {
          // Show elements when slide change completes
          const activeSlide = this.slides[this.activeIndex];
          activeSlide.querySelectorAll('.animate-fade-in-up').forEach((el, index) => {
            setTimeout(() => {
              el.style.opacity = '1';
              el.style.transform = 'translateY(0)';
              el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
            }, index * 300); // Stagger the animations
          });
        }
      }
    });
    
    // Function to update navigation button colors based on active slide
    function updateNavigationColors(slideIndex) {
      const prevBtn = document.querySelector('.swiper-button-prev');
      const nextBtn = document.querySelector('.swiper-button-next');
      
      if (prevBtn && nextBtn) {
        let bgColor, hoverColor;
        
        if (slideIndex === 0) { // First slide - hotpink
          bgColor = brandColors.hotpink;
          hoverColor = brandColors.hotpinkHover;
        } else if (slideIndex === 1) { // Second slide - teal
          bgColor = brandColors.teal;
          hoverColor = brandColors.tealHover;
        } else if (slideIndex === 2) { // Third slide - blue
          bgColor = brandColors.blue;
          hoverColor = brandColors.blueHover;
        } else {
          bgColor = brandColors.gray;
          hoverColor = brandColors.grayHover;
        }
        
        prevBtn.style.backgroundColor = bgColor;
        nextBtn.style.backgroundColor = bgColor;
        
        // Add hover effect
        prevBtn.onmouseover = function() { this.style.backgroundColor = hoverColor; };
        prevBtn.onmouseout = function() { this.style.backgroundColor = bgColor; };
        nextBtn.onmouseover = function() { this.style.backgroundColor = hoverColor; };
        nextBtn.onmouseout = function() { this.style.backgroundColor = bgColor; };
      }
    }
  });
</script>