---
// HeroSlider.astro
// Props definition for the component
interface SlideContent {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  buttonText: string;
  buttonLink: string;
  image: string;
}

interface Props {
  slides?: SlideContent[];
  showStats?: boolean;
}

// Default slide content if none is provided
const defaultSlides: SlideContent[] = [
  {
    id: "qurbani",
    title: "Qurbani Appeal",
    subtitle: "2025",
    description: "Fulfill your Qurbani with My Sadaqah Online. Give in the spirit of sacrifice and help provide fresh meat to families in need during Eid al-Adha.",
    buttonText: "Book Your Qurbani",
    buttonLink: "/appeals/qurbani",
    image: "/assets/images/home.jpg"
  },
  {
    id: "orphan",
    title: "Sponsor an",
    subtitle: "Orphan",
    description: "Make a lasting impact by sponsor an orphan today. Your support provides food, shelter, education, and care to help a child build a brighter future.",
    buttonText: "Support Now",
    buttonLink: "/appeals/sponsor-an-orphan",
    image: "/assets/images/home.jpg"
  },
  {
    id: "education",
    title: "How Your",
    subtitle: "Sadaqah Helps",
    description: "At My Sadaqah Online, every donation you make has a real and lasting impact. Your Sadaqah reaches those who need it most quickly, safely, and effectively.",
    buttonText: "Donate Now",
    buttonLink: "/appeals/sadaqah",
    image: "/assets/images/home.jpg"
  }
];

// Get component props with defaults
const { 
  slides = defaultSlides,
} = Astro.props;
---

<!-- Hero Section with Swiper Slider -->
<section class="relative overflow-hidden min-h-[500px] ">
  <!-- Swiper container -->
  <div class="swiper hero-swiper h-screen ">
    <div class="swiper-wrapper">
      {slides.map((slide, index) => (
        <div class="swiper-slide relative" id={slide.id} data-index={index}>
          <div 
            class="absolute inset-0 bg-cover bg-center bg-no-repeat"
            style={`
              background-image: linear-gradient(
                rgba(0, 0, 0, 0.65),
                rgba(0, 0, 0, 0.65)
              ),
              url('${slide.image}');
            `}
          ></div>
          
          <!-- Animated particles overlay -->
          <div class="absolute inset-0 opacity-20">
            <div class="particles-js"></div>
          </div>
          
          <div class="container mx-auto px-4 relative z-10 h-full flex items-center md:mt-[100px] mt-[50px]">
            <div class="max-w-2xl">
              <h2 class="playfair text-4xl md:text-6xl font-bold mb-2 text-white animate-fade-in-up">
                <span class="bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300">
                  {slide.title}
                </span>
              </h2>
              <h2 class="playfair text-3xl md:text-5xl italic mb-8 text-white animate-fade-in-up animation-delay-300">
                <span class="border-b-2 border-teal pb-1">
                  {slide.subtitle}
                </span>
              </h2>
              <p class="text-gray-200 mb-8 text-lg animate-fade-in-up animation-delay-600 max-w-xl">
                {slide.description}
              </p>
              <div class="flex flex-wrap gap-4 animate-fade-in-up animation-delay-900">
                <a href={slide.buttonLink}>
                <button class="group bg-teal hover:bg-opacity-90 text-white px-8 py-4 rounded-lg shadow-lg transition-all duration-300 transform hover:-translate-y-1 hover:scale-105 font-bold flex items-center gap-2">
                  {/* <i class={`fas ${slide.buttonIcon}`}></i> */}
                  {slide.buttonText}
                  <i class="fas fa-arrow-right transition-transform duration-300 group-hover:translate-x-1"></i>
                </button>
              </a>
             
              </div>
              
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Swiper pagination -->
    <div class="swiper-pagination"></div>
    
    <!-- Scroll indicator -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 text-white animate-bounce">
      <i class="fas fa-chevron-down"></i>
    </div>
  </div>
</section>

<style>
/* Hero Section Custom Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fadeInUp 0.8s ease forwards;
  opacity: 0;
}

.animation-delay-300 {
  animation-delay: 300ms;
}

.animation-delay-600 {
  animation-delay: 600ms;
}

.animation-delay-900 {
  animation-delay: 900ms;
}

/* Scroll indicator animation */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0) translateX(-50%);
  }
  40% {
    transform: translateY(-10px) translateX(-50%);
  }
  60% {
    transform: translateY(-5px) translateX(-50%);
  }
}

.animate-bounce {
  animation: bounce 2s infinite;
}

/* Custom pagination styling */
:global(.swiper-pagination-bullet) {
  width: 12px;
  height: 12px;
  background: rgba(255, 255, 255, 0.7);
  opacity: 0.5;
  transition: all 0.3s ease;
}

:global(.swiper-pagination-bullet-active) {
  opacity: 1;
  transform: scale(1.2);
  background: rgba(1, 166, 160, 0.9); /* teal color */
}

@media (max-width: 768px) {
  .hero-swiper {
    height: 600px;
  }
}
</style>

<!-- Load Swiper JS from CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script is:inline src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<!-- Optional: Load Particles JS from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<script is:inline>
  // Initialize everything after DOM is fully loaded
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize particles.js if available
    if (typeof particlesJS !== 'undefined') {
      document.querySelectorAll('.particles-js').forEach(function(container, index) {
        if (!container.id) container.id = `particles-js-${index}`;
        particlesJS(container.id, {
          "particles": {
            "number": {
              "value": 80,
              "density": {
                "enable": true,
                "value_area": 800
              }
            },
            "color": {
              "value": "#ffffff"
            },
            "shape": {
              "type": "circle",
              "stroke": {
                "width": 0,
                "color": "#000000"
              },
            },
            "opacity": {
              "value": 0.5,
              "random": true
            },
            "size": {
              "value": 3,
              "random": true
            },
            "line_linked": {
              "enable": true,
              "distance": 150,
              "color": "#ffffff",
              "opacity": 0.4,
              "width": 1
            },
            "move": {
              "enable": true,
              "speed": 2,
              "direction": "none",
              "random": false,
              "straight": false,
              "out_mode": "out",
              "bounce": false,
            }
          },
          "interactivity": {
            "detect_on": "canvas",
            "events": {
              "onhover": {
                "enable": true,
                "mode": "grab"
              },
              "resize": true
            },
            "modes": {
              "grab": {
                "distance": 140,
                "line_linked": {
                  "opacity": 1
                }
              }
            }
          },
          "retina_detect": true
        });
      });
    }

    // Teal color definitions
    const tealColor = "rgba(1, 166, 160, 0.7)";
    const tealHoverColor = "rgba(1, 166, 160, 0.9)";

    // Initialize Swiper
    const heroSwiper = new Swiper('.hero-swiper', {
      // Optional parameters
      loop: true,
      effect: 'fade', // Use fade effect for smooth transitions
      fadeEffect: {
        crossFade: true
      },
      speed: 1000, // Transition speed in ms
      autoplay: {
        delay: 5000, // 5 seconds between slides
        disableOnInteraction: false, // Continue autoplay after user interaction
      },
      
      // If you need pagination (the dots)
      pagination: {
        el: '.swiper-pagination',
        clickable: true, // Allow clicking on pagination dots
        renderBullet: function (index, className) {
          return `<span class="${className}" style="background-color: ${tealColor}"></span>`;
        }
      },
      
      // Enable keyboard control
      keyboard: {
        enabled: true,
      },
      
      // Add animation triggers on slide change
      on: {
        init: function() {
          // Initialize animations for first slide
          const activeSlide = this.slides[this.activeIndex];
          activeSlide.querySelectorAll('.animate-fade-in-up').forEach((el, index) => {
            setTimeout(() => {
              el.style.opacity = '1';
              el.style.transform = 'translateY(0)';
              el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
            }, index * 300);
          });
        },
        slideChangeTransitionStart: function() {
          // Hide elements when slide starts changing
          this.slides.forEach((slide) => {
            slide.querySelectorAll('.animate-fade-in-up').forEach((el) => {
              el.style.opacity = '0';
              el.style.transform = 'translateY(20px)';
            });
          });
        },
        slideChangeTransitionEnd: function() {
          // Show elements when slide change completes
          const activeSlide = this.slides[this.activeIndex];
          activeSlide.querySelectorAll('.animate-fade-in-up').forEach((el, index) => {
            setTimeout(() => {
              el.style.opacity = '1';
              el.style.transform = 'translateY(0)';
              el.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
            }, index * 300); // Stagger the animations
          });
        }
      }
    });
  });
</script>